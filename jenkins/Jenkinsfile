pipeline {
    agent any
    
    environment {
        DOCKERHUB_USERNAME = credentials('dockerhub-username')
        DOCKERHUB_PASSWORD = credentials('dockerhub-password')
        IMAGE_NAME = 'avigdol/flask-aws-monitor'
        IMAGE_TAG = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'feature/jenkins-pipeline', url: 'https://github.com/avigdolrotem/final-devops-project.git'
            }
        }
        
        stage('Parallel Checks') {
            parallel {
                stage('Linting') {
                    steps {
                        echo 'Starting linting checks...'
                        
                        // Python linting with Flake8
                        sh '''
                            echo "Running Flake8 for Python linting..."
                            # Mock command - replace with: flake8 app/app.py --max-line-length=88
                            echo "‚úì Python code passed Flake8 linting"
                        '''
                        
                        // Dockerfile linting with Hadolint
                        sh '''
                            echo "Running Hadolint for Dockerfile linting..."
                            # Mock command - replace with: hadolint app/Dockerfile
                            echo "‚úì Dockerfile passed Hadolint linting"
                        '''
                        
                        // Shell script linting with ShellCheck
                        sh '''
                            echo "Running ShellCheck for shell scripts..."
                            # Mock command - replace with: shellcheck scripts/*.sh
                            echo "‚úì Shell scripts passed ShellCheck"
                        '''
                    }
                }
                
                stage('Security Scan') {
                    steps {
                        echo 'Starting security scans...'
                        
                        // Python security scanning with Bandit
                        sh '''
                            echo "Running Bandit for Python security scanning..."
                            # Mock command - replace with: bandit -r app/
                            echo "‚úì Python code passed Bandit security scan"
                        '''
                        
                        // Docker image security scanning with Trivy
                        sh '''
                            echo "Running Trivy for Docker security scanning..."
                            # Mock command - replace with: trivy image flask-aws-monitor:latest
                            echo "‚úì Docker image passed Trivy security scan"
                        '''
                        
                        // Dependency vulnerability scanning
                        sh '''
                            echo "Scanning Python dependencies for vulnerabilities..."
                            # Mock command - replace with: safety check -r app/requirements.txt
                            echo "‚úì Dependencies passed vulnerability scan"
                        '''
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo "Building Docker image: ${IMAGE_NAME}:${IMAGE_TAG}"
                dir('app') {
                    sh '''
                        docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
                        docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest
                        echo "‚úì Docker image built successfully"
                    '''
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                echo "Pushing Docker image to Docker Hub..."
                sh '''
                    echo "Logging into Docker Hub..."
                    echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USERNAME} --password-stdin
                    
                    echo "Pushing image with build tag..."
                    docker push ${IMAGE_NAME}:${IMAGE_TAG}
                    
                    echo "Pushing image with latest tag..."
                    docker push ${IMAGE_NAME}:latest
                    
                    echo "‚úì Docker image pushed successfully to Docker Hub"
                '''
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up...'
            sh '''
                docker logout
                docker rmi ${IMAGE_NAME}:${IMAGE_TAG} || true
                docker rmi ${IMAGE_NAME}:latest || true
            '''
        }
        success {
            echo 'üéâ Pipeline completed successfully!'
            echo "‚úì Linting and security checks passed"
            echo "‚úì Docker image built and pushed: ${IMAGE_NAME}:${IMAGE_TAG}"
        }
        failure {
            echo '‚ùå Pipeline failed! Check logs for details.'
        }
    }
}